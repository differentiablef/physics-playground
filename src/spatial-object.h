/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-  */
/*
 * gtk-visualization
 * Copyright (C) 2013 Michael Blackmon <burned@pluto>
 * 
 * gtk-visualization is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * gtk-visualization is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _SPATIAL_OBJECT_H_
#define _SPATIAL_OBJECT_H_

#include <gdkmm.h>
#include <cairomm/cairomm.h>

#include <string>

#include "math-common.h"

// /////////////////////////////////////////////////////////////////////////////
// Prototype
class DisplayArea;

// /////////////////////////////////////////////////////////////////////////////
// Name: SpatialObject
// Synop: Basic object for rendered sprites/particles in the visualization
//        the object is specified by giving 
//              Coordinates: (x,y,z)
//              Velocity: (dx, dy, dz)
//              Mass: m
//
// NOTE: Any class derived from SpatialObject must implement
//   is_contained and draw
//
// Warning: The Cairo::Context passed to draw will have the point (x(), y())
//       as the origin, so when drawing the object, the origin will be the
//       center so coordinates passed to drawing routines should bare this 
//       in mind.
//

class SpatialObject
{
public:
	SpatialObject() : X(), dX(), wX(), F(), T()
	{
		mass = 1.0;

		M[0][0] = 1.0; M[0][1] = 0.0; M[0][2] = 0.0;
		M[1][0] = 0.0; M[1][1] = 1.0; M[1][2] = 0.0;
		M[2][0] = 0.0; M[2][1] = 0.0; M[2][2] = 1.0;

	};

	virtual ~SpatialObject() {};

public: // Interface functions.

/*
	// Coordinates of Position
	inline double &x() { return _x; };
	inline double &y() { return _y; };
	inline double &z() { return _z; };

	// Mass of object
	inline double &mass() { return _mass; };

	// Velocity of object
	inline double &dx() { return _dx; };
	inline double &dy() { return _dy; };
	inline double &dz() { return _dz; };

	// Principal reference frame of object.
	inline double *e1() { return _M[0]; };
	inline double *e2() { return _M[1]; };
	inline double *e3() { return _M[2]; };

	inline double &fx() { return _fx; };
	inline double &fy() { return _fy; };
	inline double &fz() { return _fz; };

*/
		
	std::string type()
		{ return _type; };

	void set_type( std::string ty )
		{ _type = ty; };

	int &id() { return _sp_id; };
	void set_id( int id ) { _sp_id = id; };

	void clear_forces()
		{ F[0] = F[1] = F[2] = 0.0; 
		  T[0] = T[1] = T[2] = 0.0;};

	void rotate_frame( double theta_x, double theta_y, double theta_z ); 
	
public: // Pure virtual member functions

	// /////////////////////////////////////////////////////////////////////////
	// Name: distance_to
	// Synop: Returns the Signed distance between the object and the 
	//        point.
	virtual double distance_to( Vector ) = 0;

	// /////////////////////////////////////////////////////////////////////////
	// Name: update_forces
	// Synop: Calculates and stores the forces acting on the particle
	virtual void update_forces() = 0;

	// /////////////////////////////////////////////////////////////////////////
	// Name: collid_with
	// Synop: Update the force acting on the object by adding the impluse
	//        generated by colliding with the parameter
	virtual void collid_with(SpatialObject *) = 0;

	// /////////////////////////////////////////////////////////////////////////
	// Name: draw
	// Synop: Using the Cairo context, draw the object
	// Note: the origin for cr will be (_x,_y,_z)
	virtual bool draw(const Cairo::RefPtr< Cairo::Context > &cr ) = 0;

	virtual std::string to_string() = 0;

public:
	
	
public: //
	Vector X;
	Vector dX;
	Vector wX;
	double mass;

	// Orthogonal Matrix which determines the orientation of the object
	double M[3][3];

	// Force Vector 
	Vector F;

	// Torque Vector
	Vector T;

protected:
	
	std::string _type;
	int _sp_id;
	
private:
	friend class DisplayArea;
};


void dump( SpatialObject *p );

#endif // _SPATIAL_OBJECT_H_

